{"version":3,"sources":["core/chain/translation-chain-element.js"],"names":[],"mappings":";;;;;;;;;;;MAOa,uBAAuB;AACvB,aADA,uBAAuB,CACtB,IAAI,EAAE;4BADP,uBAAuB;;AAEhC,UAAI,CAAC,eAAe,GAAG,IAAI,CAAC;AAC5B,UAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KACzB;;iBAJU,uBAAuB;;aAM1B,oBAAG;AACT,eAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;OACxC;;;aAEM,mBAAG;AACR,eAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;OACvC;;;aAEa,wBAAC,WAAW,EAAE;AAC1B,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;OAChC;;;aAEQ,mBAAC,KAAK,EAAE;AACf,YAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE;AAC3B,iBAAO,4BA1BX,iCAAiC,CA0BgB,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;SACrE,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AAC5B,cAAI,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACtD,iBAAO,4BA5BX,gCAAgC,CA4BgB,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;SAC5E,MAAM,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE;AAC9C,cAAI,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACtD,iBAAO,4BA9BX,wBAAwB,CA8BgB,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;SACpE,MAAM;AACL,iBAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC1C;OACF;;;aAEoB,+BAAC,KAAK,EAAE;AAC3B,YAAI,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,wBAAgB,GAAG,gBAAgB,GAAG,CAAC,GAAG,gBAAgB,GAAG,CAAC,CAAC;AAC/D,eAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC;OAC7C;;;WApCU,uBAAuB","file":"core/chain/translation-chain-element.js","sourcesContent":["import {\n  UnderflowElementTranslationResult,\n  OverflowElementTranslationResult,\n  ElementTranslationResult\n}\nfrom '../types/translation-result';\n\nexport class TranslationChainElement {\n  constructor(base) {\n    this.translationBase = base;\n    this.nextElement = null;\n  }\n\n  getValue() {\n    return this.translationBase.getValue();\n  }\n\n  getWord() {\n    return this.translationBase.getWord();\n  }\n\n  setNextElement(nextElement) {\n    this.nextElement = nextElement;\n  }\n\n  translate(value) {\n    if (value < this.getValue()) {\n      return new UnderflowElementTranslationResult(value, this.getWord());\n    } else if (!this.nextElement) {\n      let factoredValue = this.factorWithCurrentBase(value);\n      return new OverflowElementTranslationResult(factoredValue, this.getWord());\n    } else if (value < this.nextElement.getValue()) {\n      let factoredValue = this.factorWithCurrentBase(value);\n      return new ElementTranslationResult(factoredValue, this.getWord());\n    } else {\n      return this.nextElement.translate(value);\n    }\n  }\n\n  factorWithCurrentBase(value) {\n    let conversionFactor = this.getValue();\n    conversionFactor = conversionFactor > 0 ? conversionFactor : 1;\n    return Math.round(value / conversionFactor);\n  }\n}\n"],"sourceRoot":"/source/"}